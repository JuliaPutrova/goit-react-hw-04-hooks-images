{"version":3,"sources":["components/ImageGallery/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/Modal/Modal.js","components/Searchbar/Searchbar.js","components/Button/Button.js","components/Loader/Loader.styled.jsx","components/Loader/Loader.js","services/pixabay-api.js","App.js","index.js"],"names":["GalleryItem","image","onOpenModal","className","src","webformatURL","alt","largeImageURL","onClick","ImageGallery","images","map","id","modalRoot","document","getElementById","Modal","children","useEffect","handleKeyDown","e","code","window","addEventListener","removeEventListener","createPortal","currentTarget","target","Searchbar","onSubmit","reset","useState","query","setQuery","preventDefault","type","onChange","value","name","autoComplete","autoFocus","placeholder","Button","LoaderSpinner","styled","div","LoaderIcon","color","height","width","timeout","axios","defaults","baseURL","api","getPictures","page","get","then","response","data","hits","App","setImages","setPages","isLoading","setIsLoading","showModal","setShowModal","largeImage","setLargeImage","scrollTo","top","documentElement","scrollHeight","behavior","catch","alert","finally","toggleShowModal","prev","Loader","dataset","img","length","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9f42b2d3.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nfunction GalleryItem({ image, onOpenModal }) {\n  return (\n    <li className=\"ImageGalleryItem\">\n      <img\n        src={image.webformatURL}\n        alt=\"\"\n        className=\"ImageGalleryItem-image\"\n        data-img={image.largeImageURL}\n        onClick={onOpenModal}\n      />\n    </li>\n  );\n}\n\nGalleryItem.propTypes = {\n  image: PropTypes.object.isRequired,\n  onOpenModal: PropTypes.func.isRequired,\n};\n\nexport default GalleryItem;\n","import PropTypes from \"prop-types\";\nimport GalleryItem from \"./ImageGalleryItem\";\n\nfunction ImageGallery({ images, onOpenModal }) {\n  return (\n    <ul className=\"ImageGallery\">\n      {images.map((image) => (\n        <GalleryItem image={image} key={image.id} onOpenModal={onOpenModal} />\n      ))}\n    </ul>\n  );\n}\n\nImageGallery.propTypes = {\n  images: PropTypes.arrayOf(PropTypes.object),\n  onOpenModal: PropTypes.func.isRequired,\n};\n\nexport default ImageGallery;\n","import { useEffect } from \"react\";\n//метод из ReactDOM для создания портала разметки модалки\nimport { createPortal } from \"react-dom\";\nimport PropTypes from \"prop-types\";\n\n//портал для разметки модалки\nconst modalRoot = document.getElementById(\"modal-root\");\n\nfunction Modal({ onClick, children }) {\n  useEffect(() => {\n    //метод для закрытия модалки по кнопке Escape\n    const handleKeyDown = (e) => {\n      if (e.code === \"Escape\") {\n        onClick();\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [onClick]);\n\n  //метод для закрытия модалки по backdrop\n  const handleBackDropClick = (e) => {\n    if (e.currentTarget === e.target) {\n      onClick();\n    }\n  };\n\n  return createPortal(\n    <div className=\"Overlay\" onClick={handleBackDropClick}>\n      <div className=\"Modal\">{children}</div>\n    </div>,\n    modalRoot\n  );\n}\n\nModal.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Modal;\n\n// /////////////классовый Компонент\n// import React, { Component } from \"react\";\n// //метод из ReactDOM для создания портала разметки модалки\n// import { createPortal } from \"react-dom\";\n\n// //портал для разметки модалки\n// const modalRoot = document.getElementById(\"modal-root\");\n\n// class Modal extends Component {\n//   componentDidMount() {\n//     window.addEventListener(\"keydown\", this.handleKeyDown);\n//   }\n\n//   //метод для очистки слушателя событий\n//   componentWillUnmount = (e) => {\n//     window.removeEventListener(\"keydown\", this.handleKeyDown);\n//   };\n\n//   //метод для закрытия модалки по кнопке Escape\n//   handleKeyDown = (e) => {\n//     if (e.code === \"Escape\") {\n//       this.props.onClick();\n//     }\n//   };\n\n//   //метод для закрытия модалки по backdrop\n//   handleBackDropClick = (e) => {\n//     if (e.currentTarget === e.target) {\n//       this.props.onClick();\n//     }\n//   };\n\n//   render() {\n//     return createPortal(\n//       <div className=\"Overlay\" onClick={this.handleBackDropClick}>\n//         <div className=\"Modal\">{this.props.children}</div>\n//       </div>,\n//       modalRoot\n//     );\n//   }\n// }\n// export default Modal;\n","import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction Searchbar({ onSubmit, reset }) {\n  const [query, setQuery] = useState(\"\");\n\n  //метод, который будет обновлять состояние input\n  const handleChangeQuery = (e) => {\n    setQuery(e.currentTarget.value);\n  };\n\n  //метод для отправки form\n  const handleSubmit = (e) => {\n    //функция, чтобы старница не перезагружалась при submit\n    e.preventDefault();\n    //передаем props Компонента SearchBar (ребенка) в Компонент App (родитель)\n    onSubmit(query);\n    setQuery(\"\");\n\n    //очищаем поле поиса\n    reset();\n  };\n\n  return (\n    <header className=\"Searchbar\">\n      <form className=\"SearchForm\" onSubmit={handleSubmit}>\n        <button type=\"submit\" className=\"SearchForm-button\">\n          <span className=\"SearchForm-button-label\">Search</span>\n        </button>\n\n        <input\n          onChange={handleChangeQuery}\n          className=\"SearchForm-input\"\n          type=\"text\"\n          name=\"query\"\n          value={query}\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search images and photos\"\n        />\n      </form>\n    </header>\n  );\n}\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  reset: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n\n// ////////////\n// import React, { Component } from \"react\";\n\n// class Searchbar extends Component {\n//   state = {\n//     query: \"\",\n//   };\n\n//   //метод, который будет обновлять состояние input\n//   handleChangeQuery = (e) => {\n//     const { name, value } = e.currentTarget;\n//     this.setState({\n//       [name]: value,\n//     });\n//   };\n\n//   //метод для отправки form\n//   handleSubmit = (e) => {\n//     //функция, чтобы старница не перезагружалась при submit\n//     e.preventDefault();\n//     //передаем props Компонента SearchBar (ребенка) в Компонент App (родитель)\n//     this.props.onSubmit(this.state.query);\n//     this.setState({\n//       query: \"\",\n//     });\n//     //очищаем поле поиса\n//     this.props.reset();\n//   };\n\n//   render() {\n//     return (\n//       <header className=\"Searchbar\">\n//         <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\n//           <button type=\"submit\" className=\"SearchForm-button\">\n//             <span className=\"SearchForm-button-label\">Search</span>\n//           </button>\n\n//           <input\n//             onChange={this.handleChangeQuery}\n//             className=\"SearchForm-input\"\n//             type=\"text\"\n//             name=\"query\"\n//             value={this.state.query}\n//             autoComplete=\"off\"\n//             autoFocus\n//             placeholder=\"Search images and photos\"\n//           />\n//         </form>\n//       </header>\n//     );\n//   }\n// }\n\n// export default Searchbar;\n","import PropTypes from \"prop-types\";\n\nfunction Button({ onClick }) {\n  return (\n    <>\n      <button type=\"button\" className=\"Button\" onClick={onClick}>\n        Load more\n      </button>\n    </>\n  );\n}\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Button;\n","import styled from \"@emotion/styled\";\n\nexport const LoaderSpinner = styled.div`\n    position: absolute;\n    display: block;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    content: \"\";\n`;","import { LoaderSpinner } from \"./Loader.styled.jsx\";\nimport Loader from \"react-loader-spinner\";\n\nfunction LoaderIcon() {\n  return (\n    <LoaderSpinner>\n      <Loader\n        type=\"Puff\"\n        color=\"#000080\"\n        height={100}\n        width={100}\n        timeout={5000}\n      />\n    </LoaderSpinner>\n  );\n}\n\nexport default LoaderIcon;\n","//импорт библиотеки axios\nimport axios from \"axios\";\n\naxios.defaults.baseURL = \"https://pixabay.com/api/\";\nconst KEY = \"22803693-8c4edbce38da2fef7cf44b0fa\";\n\n//функция для запроса на сервер\nfunction getPictures(query, page) {\n  return axios\n    .get(\n      `?key=${KEY}&q=${query}&image_type=photo&orientation=horizontal&page=${page}&per_page=12`\n    )\n    .then((response) => response.data.hits);\n}\n\nconst api = {\n  getPictures,\n};\n\nexport default api;\n","import { useState, useEffect } from \"react\";\n\nimport ImageGallery from \"./components/ImageGallery\";\nimport Modal from \"./components/Modal\";\nimport Searchbar from \"./components/Searchbar\";\nimport Button from \"./components/Button\";\nimport LoaderIcon from \"./components/Loader\";\n\nimport api from \"./services/pixabay-api\";\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [images, setImages] = useState([]);\n  const [page, setPages] = useState(1);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [largeImage, setLargeImage] = useState(\"\");\n\n  // метод для сохранения поиска\n  const handleSearchBarSubmit = (query) => {\n    setQuery(query);\n    setPages(1);\n    setImages([]);\n  };\n\n  // //метод запроса на сервер\n  useEffect(() => {\n    if (query === \"\") {\n      return;\n    }\n\n    getPictures();\n  }, [query]);\n\n  // проверка для плавного скролла\n  useEffect(() => {\n    if (page !== 1) {\n      window.scrollTo({\n        top: document.documentElement.scrollHeight,\n        behavior: \"smooth\",\n      });\n    }\n  });\n\n  const getPictures = () => {\n    setIsLoading(true);\n\n    api\n      .getPictures(query, page)\n      .then((response) => {\n        setImages([...images, ...response]);\n        setPages(page + 1);\n      })\n      .catch(() => alert(\"Please, try again...\"))\n      .finally(() => setIsLoading(false));\n  };\n\n  const reset = () => {\n    setImages([]);\n    setPages(1);\n  };\n\n  const toggleShowModal = () => {\n    setShowModal((prev) => !prev);\n  };\n\n  const onOpenModal = (e) => {\n    setLargeImage(e.target.dataset.img);\n    toggleShowModal();\n  };\n\n  return (\n    <div>\n      <Searchbar onSubmit={handleSearchBarSubmit} reset={reset} />\n      {isLoading && <LoaderIcon />}\n      <ImageGallery images={images} onOpenModal={onOpenModal} />\n      {images.length > 0 && <Button onClick={getPictures} />}\n\n      {showModal && (\n        <Modal onClick={toggleShowModal}>\n          <img src={largeImage} alt=\"\" />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n// //////////////////классовый Компонент\n// import React, { Component } from \"react\";\n// //импортируем библиотеку\n// import Loader from \"react-loader-spinner\";\n\n// import ImageGallery from \"./components/ImageGallery\";\n// import Modal from \"./components/Modal\";\n// import Searchbar from \"./components/Searchbar\";\n// import Button from \"./components/Button\";\n// import LoaderIcon from \"./components/Loader\";\n\n// import api from \"./services/pixabay-api\";\n\n// class App extends Component {\n//   state = {\n//     query: \"\",\n//     images: [],\n//     page: 1,\n//     error: null,\n//     isLoading: false,\n//     showModal: false,\n//     largeImage: \"\",\n//   };\n\n//   // метод для сохранения поиска\n//   handleSearchBarSubmit = (query) => {\n//     this.setState({\n//       query: query,\n//       // page: 1,\n//       // images: [],\n//     });\n//   };\n\n//   // //метод запроса на сервер\n//   componentDidUpdate(prevProps, prevState) {\n//     const prevSearch = prevState.query;\n//     const nextSearch = this.state.query;\n//     if (prevSearch !== nextSearch) {\n//       this.getPictures();\n//     }\n//     // проверка для плавного скролла\n//     if (prevState.page !== this.state.page) {\n//       window.scrollTo({\n//         top: document.documentElement.scrollHeight,\n//         behavior: \"smooth\",\n//       });\n//     }\n//   }\n\n//   getPictures = () => {\n//     const { query, page } = this.state;\n\n//     this.setState({\n//       isLoading: true,\n//     });\n\n//     api\n//       .getPictures(query, page)\n//       .then((response) =>\n//         this.setState((prevState) => ({\n//           images: [...prevState.images, ...response],\n//           page: prevState.page + 1,\n//         }))\n//       )\n//       .catch((error) => this.setState({ error }))\n//       .finally(() => this.setState({ isLoading: false }));\n//   };\n\n//   reset = () => {\n//     this.setState({\n//       images: [],\n//       page: 1,\n//     });\n//   };\n\n//   toggleShowModal = () => {\n//     this.setState((prevState) => ({\n//       showModal: !prevState.showModal,\n//     }));\n//   };\n\n//   onOpenModal = (e) => {\n//     this.setState({\n//       largeImage: e.target.dataset.img,\n//     });\n//     this.toggleShowModal();\n//   };\n\n//   render() {\n//     const { images, largeImage, isLoading, showModal } = this.state;\n\n//     return (\n//       <div>\n//         <Searchbar onSubmit={this.handleSearchBarSubmit} reset={this.reset} />\n//         {isLoading && <LoaderIcon />}\n//         <ImageGallery images={images} onOpenModal={this.onOpenModal} />\n//         {images.length > 0 && <Button onClick={this.getPictures} />}\n\n//         {showModal && (\n//           <Modal onClick={this.toggleShowModal}>\n//             <img src={largeImage} alt=\"\" />\n//           </Modal>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}